# -*- coding: utf-8 -*-
"""SpamModel2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1emlGVIpwD329ew-noQ2ZA76TN-nKxHeR
"""

import pandas as pd 
df = pd.read_csv('/content/spam_ham_dataset.csv') 
df.drop(df.filter(regex="Unname"),axis=1, inplace=True)
from nltk.tokenize import RegexpTokenizer
def clean_str(string, reg = RegexpTokenizer(r'[a-z]+')): 
    # Clean a string with RegexpTokenizer
    string = string.lower() 
    tokens = reg.tokenize(string) 
    return " ".join(tokens) 
df['text_clean'] = df['text'].apply(lambda string: clean_str(string))
df_spam = df[df['label']=='spam']
df_ham = df[df['label']=='ham'] 
df_ham_downsampled = df_ham.sample(df_spam.shape[0])
df_balanced = pd.concat([df_ham_downsampled, df_spam])
df_balanced.drop(['text'], axis=1,inplace=True)
from sklearn.model_selection import train_test_split 
X_train, X_test, y_train, y_test = train_test_split(df_balanced['text_clean'],df_balanced['label_num'], stratify=df_balanced['label_num'])
import tensorflow as tf 
import tensorflow_hub as hub 
!pip install -U tensorflow-text==2.6.0 
import tensorflow_text as text 
bert_preprocess = hub.KerasLayer("https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3")
bert_encoder = hub.KerasLayer("https://tfhub.dev/tensorflow/bert_en_uncased_L-12_H-768_A-12/4")
text_input = tf.keras.layers.Input(shape=(), dtype=tf.string, name='text')
preprocessed_text = bert_preprocess(text_input)
outputs = bert_encoder(preprocessed_text)
l = tf.keras.layers.Dropout(0.1, name="dropout")(outputs['pooled_output']) 
l = tf.keras.layers.Dense(1, activation='sigmoid', name="output")(l)
model = tf.keras.Model(inputs=[text_input], outputs = [l])
METRICS = [ 
      tf.keras.metrics.BinaryAccuracy(name='accuracy'),
      tf.keras.metrics.Precision(name='precision'),
      tf.keras.metrics.Recall(name='recall')
] 
model.compile(optimizer='adam',
              loss='binary_crossentropy', 
              metrics=METRICS) 
from keras.callbacks import ModelCheckpoint,EarlyStopping
mc=ModelCheckpoint(filepath="/content/saved_model/best_model.h5",
                   monitor="accuracy",
                   verbose=1, 
                   save_best_only=True) 
es=EarlyStopping(monitor="accuracy", 
                 min_delta=0.01, 
                 patience=5, # No of time it should wait if accuracy doesnt increase
                 verbose=1)
cb=[mc,es]
model.fit(X_train, y_train, epochs=30,callbacks=cb)

model.evaluate(X_test, y_test)

y_predicted = model.predict(X_test)
y_predicted

import numpy as np
def predict(mail):
     y_predicted = model.predict(X_test)
     y_predicted = y_predicted.flatten()
     y_predicted = np.where(y_predicted > 0.5, 1, 0)

y_predicted



"""See how to use saved model for prediction??"""

